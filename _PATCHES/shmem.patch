Allow sharing pthreads handles among DLLs and EXEs even when compiled statically

From: J.M. Eubank <john@thesnappy.net>


---
 mingw-w64-libraries/winpthreads/Makefile.am        |    2 
 mingw-w64-libraries/winpthreads/Makefile.in        |   15 +
 mingw-w64-libraries/winpthreads/src/barrier.c      |    6 +
 mingw-w64-libraries/winpthreads/src/cond.c         |    6 +
 mingw-w64-libraries/winpthreads/src/rwlock.c       |   11 +
 mingw-w64-libraries/winpthreads/src/shmem3.h       |  160 ++++++++++++++
 mingw-w64-libraries/winpthreads/src/shmem3_mingw.c |  226 ++++++++++++++++++++
 mingw-w64-libraries/winpthreads/src/thread.c       |   63 ++++--
 8 files changed, 467 insertions(+), 22 deletions(-)
 create mode 100644 mingw-w64-libraries/winpthreads/src/shmem3.h
 create mode 100644 mingw-w64-libraries/winpthreads/src/shmem3_mingw.c

diff --git a/mingw-w64-libraries/winpthreads/Makefile.am b/mingw-w64-libraries/winpthreads/Makefile.am
index 8a3b758c8..f67a5558d 100644
--- a/mingw-w64-libraries/winpthreads/Makefile.am
+++ b/mingw-w64-libraries/winpthreads/Makefile.am
@@ -13,7 +13,7 @@ EXTRA_libwinpthread_la_DEPENDENCIES = fakelib/libgcc.a  fakelib/libgcc_eh.a  fak
 libwinpthread_la_SOURCES = \
   src/barrier.h  src/cond.h  src/misc.h  src/mutex.h  src/rwlock.h  src/spinlock.h  src/thread.h  src/ref.h  src/sem.h  src/wpth_ver.h \
   src/barrier.c  src/cond.c  src/misc.c  src/mutex.c  src/rwlock.c  src/spinlock.c  src/thread.c  src/ref.c  src/sem.c  src/sched.c \
-  src/winpthread_internal.h  src/clock.c src/nanosleep.c src/version.rc
+  src/winpthread_internal.h  src/clock.c src/nanosleep.c src/version.rc src/shmem3_mingw.c
 
 # Break circular dep on bootstrap
 noinst_LIBRARIES = fakelib/libgcc.a  fakelib/libgcc_eh.a  fakelib/libgcc_s.a
diff --git a/mingw-w64-libraries/winpthreads/Makefile.in b/mingw-w64-libraries/winpthreads/Makefile.in
index d70b69455..6a65bb66e 100644
--- a/mingw-w64-libraries/winpthreads/Makefile.in
+++ b/mingw-w64-libraries/winpthreads/Makefile.in
@@ -172,7 +172,8 @@ am_libwinpthread_la_OBJECTS = src/libwinpthread_la-barrier.lo \
 	src/libwinpthread_la-thread.lo src/libwinpthread_la-ref.lo \
 	src/libwinpthread_la-sem.lo src/libwinpthread_la-sched.lo \
 	src/libwinpthread_la-clock.lo \
-	src/libwinpthread_la-nanosleep.lo src/version.lo
+	src/libwinpthread_la-nanosleep.lo src/version.lo \
+	src/libwinpthread_la-shmem3_mingw.lo
 libwinpthread_la_OBJECTS = $(am_libwinpthread_la_OBJECTS)
 AM_V_lt = $(am__v_lt_@AM_V@)
 am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
@@ -464,7 +465,7 @@ EXTRA_libwinpthread_la_DEPENDENCIES = fakelib/libgcc.a  fakelib/libgcc_eh.a  fak
 libwinpthread_la_SOURCES = \
   src/barrier.h  src/cond.h  src/misc.h  src/mutex.h  src/rwlock.h  src/spinlock.h  src/thread.h  src/ref.h  src/sem.h  src/wpth_ver.h \
   src/barrier.c  src/cond.c  src/misc.c  src/mutex.c  src/rwlock.c  src/spinlock.c  src/thread.c  src/ref.c  src/sem.c  src/sched.c \
-  src/winpthread_internal.h  src/clock.c src/nanosleep.c src/version.rc
+  src/winpthread_internal.h  src/clock.c src/nanosleep.c src/version.rc src/shmem3_mingw.c
 
 
 # Break circular dep on bootstrap
@@ -674,6 +675,8 @@ src/libwinpthread_la-clock.lo: src/$(am__dirstamp) \
 	src/$(DEPDIR)/$(am__dirstamp)
 src/libwinpthread_la-nanosleep.lo: src/$(am__dirstamp) \
 	src/$(DEPDIR)/$(am__dirstamp)
+src/libwinpthread_la-shmem3_mingw.lo: src/$(am__dirstamp) \
+	src/$(DEPDIR)/$(am__dirstamp)
 src/version.lo: src/$(am__dirstamp) src/$(DEPDIR)/$(am__dirstamp)
 
 libwinpthread.la: $(libwinpthread_la_OBJECTS) $(libwinpthread_la_DEPENDENCIES) $(EXTRA_libwinpthread_la_DEPENDENCIES) 
@@ -698,6 +701,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@src/$(DEPDIR)/libwinpthread_la-rwlock.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@src/$(DEPDIR)/libwinpthread_la-sched.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@src/$(DEPDIR)/libwinpthread_la-sem.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@src/$(DEPDIR)/libwinpthread_la-shmem.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@src/$(DEPDIR)/libwinpthread_la-spinlock.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@src/$(DEPDIR)/libwinpthread_la-thread.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@src/libgcc/$(DEPDIR)/dll_dependency.Po@am__quote@
@@ -835,6 +839,13 @@ src/libwinpthread_la-nanosleep.lo: src/nanosleep.c
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwinpthread_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o src/libwinpthread_la-nanosleep.lo `test -f 'src/nanosleep.c' || echo '$(srcdir)/'`src/nanosleep.c
 
+src/libwinpthread_la-shmem3_mingw.lo: src/shmem3_mingw.c
+@am__fastdepCC_TRUE@	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwinpthread_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT src/libwinpthread_la-shmem3_mingw.lo -MD -MP -MF src/$(DEPDIR)/libwinpthread_la-shmem3_mingw.Tpo -c -o src/libwinpthread_la-shmem3_mingw.lo `test -f 'src/shmem3_mingw.c' || echo '$(srcdir)/'`src/shmem3_mingw.c
+@am__fastdepCC_TRUE@	$(am__mv) src/$(DEPDIR)/libwinpthread_la-shmem3_mingw.Tpo src/$(DEPDIR)/libwinpthread_la-shmem3_mingw.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='src/shmem3_mingw.c' object='src/libwinpthread_la-shmem3_mingw.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwinpthread_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o src/libwinpthread_la-shmem3_mingw.lo `test -f 'src/shmem3_mingw.c' || echo '$(srcdir)/'`src/shmem3_mingw.c
+
 mostlyclean-libtool:
 	-rm -f *.lo
 
diff --git a/mingw-w64-libraries/winpthreads/src/barrier.c b/mingw-w64-libraries/winpthreads/src/barrier.c
index 95b2252af..b4754bb5e 100644
--- a/mingw-w64-libraries/winpthreads/src/barrier.c
+++ b/mingw-w64-libraries/winpthreads/src/barrier.c
@@ -27,8 +27,14 @@
 #include "barrier.h"
 #include "ref.h" 
 #include "misc.h"
+#include "shmem3.h"
 
+#if !(USE_SHMEM3)
 static pthread_spinlock_t barrier_global = PTHREAD_SPINLOCK_INITIALIZER;
+#else
+__SHMEM_DEFINE_INIT(pthread_spinlock_t, barrier_global_shmem, PTHREAD_SPINLOCK_INITIALIZER)
+#define barrier_global __SHMEM_GET(pthread_spinlock_t, barrier_global_shmem)
+#endif
 
 static WINPTHREADS_ATTRIBUTE((noinline)) int
 barrier_unref(volatile pthread_barrier_t *barrier, int res)
diff --git a/mingw-w64-libraries/winpthreads/src/cond.c b/mingw-w64-libraries/winpthreads/src/cond.c
index e4629d4c4..5fab63d06 100644
--- a/mingw-w64-libraries/winpthreads/src/cond.c
+++ b/mingw-w64-libraries/winpthreads/src/cond.c
@@ -37,6 +37,7 @@
 #include "thread.h"
 #include "misc.h"
 #include "winpthread_internal.h"
+#include "shmem3.h"
 
 #include "pthread_compat.h"
 
@@ -82,7 +83,12 @@ void cond_print(volatile pthread_cond_t *c, char *txt)
 }
 #endif
 
+#if !(USE_SHMEM3)
 static pthread_spinlock_t cond_locked = PTHREAD_SPINLOCK_INITIALIZER;
+#else
+__SHMEM_DEFINE_INIT(pthread_spinlock_t, cond_locked_shmem_cond, PTHREAD_SPINLOCK_INITIALIZER)
+#define cond_locked __SHMEM_GET(pthread_spinlock_t, cond_locked_shmem_cond)
+#endif
 
 static int
 cond_static_init (pthread_cond_t *c)
diff --git a/mingw-w64-libraries/winpthreads/src/rwlock.c b/mingw-w64-libraries/winpthreads/src/rwlock.c
index 933d43885..19a34f4aa 100644
--- a/mingw-w64-libraries/winpthreads/src/rwlock.c
+++ b/mingw-w64-libraries/winpthreads/src/rwlock.c
@@ -28,8 +28,14 @@
 #include "ref.h"
 #include "rwlock.h"
 #include "misc.h"
+#include "shmem3.h"
 
+#if !(USE_SHMEM3)
 static pthread_spinlock_t rwl_global = PTHREAD_SPINLOCK_INITIALIZER;
+#else
+__SHMEM_DEFINE_INIT(pthread_spinlock_t, rwl_global_shmem, PTHREAD_SPINLOCK_INITIALIZER)
+#define rwl_global __SHMEM_GET(pthread_spinlock_t, rwl_global_shmem)
+#endif
 
 static WINPTHREADS_ATTRIBUTE((noinline)) int rwlock_static_init(pthread_rwlock_t *rw);
 
@@ -148,7 +154,12 @@ void rwl_print(volatile pthread_rwlock_t *rwl, char *txt)
 }
 #endif
 
+#if !(USE_SHMEM3)
 static pthread_spinlock_t cond_locked = PTHREAD_SPINLOCK_INITIALIZER;
+#else
+__SHMEM_DEFINE_INIT(pthread_spinlock_t, cond_locked_shmem_rwlock, PTHREAD_SPINLOCK_INITIALIZER)
+#define cond_locked __SHMEM_GET(pthread_spinlock_t, cond_locked_shmem_rwlock)
+#endif
 
 static WINPTHREADS_ATTRIBUTE((noinline)) int rwlock_static_init(pthread_rwlock_t *rw)
 {
diff --git a/mingw-w64-libraries/winpthreads/src/shmem3.h b/mingw-w64-libraries/winpthreads/src/shmem3.h
new file mode 100644
index 000000000..d3aca62bb
--- /dev/null
+++ b/mingw-w64-libraries/winpthreads/src/shmem3.h
@@ -0,0 +1,160 @@
+/* -- shmem3.h --
+ *
+ * The __SHMEM mechanism is for sharing named pointers among the instances of a
+ * static library compiled into separate modules (binaries or shared libraries)
+ * in one runtime program. It's used in libgcc, libstdc++, and winpthreads/
+ * mcfgthread to create shared instances of all global or static variables.
+ * This allows us to propagate exceptions out of shared libraries even when
+ * libgcc and libstdc++ are compiled in statically, and to share thread-related
+ * data among different instances of winpthreads/mcfgthread in the same process.
+ *
+ * This code is released into the public domain without warranty; it may be
+ * freely used and redistributed.
+ */
+
+
+#ifndef __SHMEM3_H_INCLUDED
+#define __SHMEM3_H_INCLUDED
+
+#if (defined(_WIN32) || defined(_WIN64)) && !defined(SHARED) && !defined(DLL_EXPORT) && !defined(USE_SHMEM3)
+#define USE_SHMEM3 1
+#elif !defined (USE_SHMEM3)
+#define USE_SHMEM3 0
+#endif
+
+#if USE_SHMEM3
+
+
+#ifdef __cplusplus
+#define __SHMEM_CLINK extern "C"
+#else
+#define __SHMEM_CLINK
+#endif
+
+
+#define __CONCAT2_INDIR(a, b) a ## b
+#define __SHMEM_CONCAT2(a, b) __CONCAT2_INDIR(a, b)
+
+
+#define __SHMEM_NAME(name) __SHMEM_CONCAT2(__shmem3_winpthreads_tdm_, name)
+#define SHMEM_VERSION_PREFIX "__shmem3_winpthreads_tdm_"
+
+
+#define __SHMEM_GET_NAMED_PTR(name) \
+ ( \
+ __SHMEM_NAME(local_shmem_region).head \
+ ? \
+ __SHMEM_NAME(local_shmem_region).head->name \
+ : \
+ __SHMEM_NAME(init_local_region)()->name \
+ )
+
+
+#define __SHMEM_DEFINE(type, name) \
+ type __SHMEM_CONCAT2(__shmem_, name); \
+ __SHMEM_CLINK type* __SHMEM_CONCAT2(__shmem_init_, name)(void); \
+ __SHMEM_CLINK type* __SHMEM_CONCAT2(__shmem_init_, name)(void) \
+ { \
+   __SHMEM_NAME(local_shmem_region).head->name = &__SHMEM_CONCAT2(__shmem_, name); \
+   return &__SHMEM_CONCAT2(__shmem_, name); \
+ }
+
+#define __SHMEM_DEFINE_INIT(type, name, initval) \
+ type __SHMEM_CONCAT2(__shmem_, name) = initval; \
+ __SHMEM_CLINK type* __SHMEM_CONCAT2(__shmem_init_, name)(void); \
+ __SHMEM_CLINK type* __SHMEM_CONCAT2(__shmem_init_, name)(void) \
+ { \
+   __SHMEM_NAME(local_shmem_region).head->name = &__SHMEM_CONCAT2(__shmem_, name); \
+   return &__SHMEM_CONCAT2(__shmem_, name); \
+ }
+
+#define __SHMEM_DEFINE_ARRAY(type, name, size) \
+ type __SHMEM_CONCAT2(__shmem_, name)[size]; \
+ __SHMEM_CLINK type* __SHMEM_CONCAT2(__shmem_init_, name)(void); \
+ __SHMEM_CLINK type* __SHMEM_CONCAT2(__shmem_init_, name)(void) \
+ { \
+   __SHMEM_NAME(local_shmem_region).head->name = __SHMEM_CONCAT2(__shmem_, name); \
+   return __SHMEM_CONCAT2(__shmem_, name); \
+ }
+
+
+#define __SHMEM_DECLARE(type, name) \
+ __SHMEM_CLINK type* __SHMEM_CONCAT2(__shmem_init_, name)(void);
+
+
+#define __SHMEM_GET(type, name) \
+ (*(type*)( \
+ __SHMEM_GET_NAMED_PTR(name) \
+ ? \
+ __SHMEM_GET_NAMED_PTR(name) \
+ : \
+ __SHMEM_CONCAT2(__shmem_init_, name)() \
+ ))
+
+#define __SHMEM_GET_ARRAY(type, name) \
+ ((type*)( \
+ __SHMEM_GET_NAMED_PTR(name) \
+ ? \
+ __SHMEM_GET_NAMED_PTR(name) \
+ : \
+ __SHMEM_CONCAT2(__shmem_init_, name)() \
+ ))
+
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+struct __SHMEM_NAME(region_struct_name)
+{
+    struct __SHMEM_NAME(region_struct_name)* head;
+    struct __SHMEM_NAME(region_struct_name)* next;
+    void* _pthread_key_dest_shmem;
+    void* _pthread_cancelling_shmem;
+    void* _pthread_concur_shmem;
+    void* _pthread_tls_once_shmem;
+    void* _pthread_tls_shmem;
+    void* _pthread_key_lock_shmem;
+    void* _pthread_key_max_shmem;
+    void* _pthread_key_sch_shmem;
+    void* pthr_root_shmem;
+    void* pthr_last_shmem;
+    void* mtx_pthr_locked_shmem;
+    void* idList_shmem;
+    void* idListCnt_shmem;
+    void* idListMax_shmem;
+    void* idListNextId_shmem;
+    void* once_obj_shmem;
+    void* once_global_shmem;
+    void* dummy_concurrency_level_shmem;
+    void* rwl_global_shmem;
+    void* cond_locked_shmem_rwlock;
+    void* cond_locked_shmem_cond;
+    void* barrier_global_shmem;
+};
+
+typedef struct __SHMEM_NAME(region_struct_name) __SHMEM_NAME(region_struct);
+
+extern __SHMEM_NAME(region_struct) __SHMEM_NAME(local_shmem_region);
+
+__SHMEM_CLINK __SHMEM_NAME(region_struct)* __SHMEM_NAME(init_local_region)(void);
+
+#ifdef __cplusplus
+}
+#endif
+
+
+#else /* ! USE_SHMEM3 */
+
+
+#define __SHMEM_DEFINE(type, name) type name;
+#define __SHMEM_DEFINE_INIT(type, name, initval) type name = initval;
+#define __SHMEM_DEFINE_ARRAY(type, name, size) type name[size];
+#define __SHMEM_DECLARE(type, name) extern type name;
+#define __SHMEM_GET(type, name) name
+#define __SHMEM_GET_ARRAY(type, name) name
+
+
+#endif /* ! USE_SHMEM3 */
+
+#endif /* ! __SHMEM3_H_INCLUDED */
diff --git a/mingw-w64-libraries/winpthreads/src/shmem3_mingw.c b/mingw-w64-libraries/winpthreads/src/shmem3_mingw.c
new file mode 100644
index 000000000..6ba6af98b
--- /dev/null
+++ b/mingw-w64-libraries/winpthreads/src/shmem3_mingw.c
@@ -0,0 +1,226 @@
+/* -- shmem3_mingw.c --
+*
+* See shmem3.h for a description of __SHMEM.
+*
+* This is the MinGW.org/MinGW64 implementation of __SHMEM, based in part on a
+* mechanism originally developed by Thomas Pfaff and Adriano dos Santos
+* Fernandes, rewritten by J.M. Eubank as of 2021 with suggestions from Ralph
+* Engels.
+*
+* This code is released into the public domain without warranty; it may be
+* freely used and redistributed.
+*/
+
+#include "shmem3.h"
+
+#if USE_SHMEM3
+
+#define WIN32_LEAN_AND_MEAN
+/* #include <malloc.h> */
+/* #include <stdio.h> */
+#include <stdlib.h> /* For _onexit */
+#include <windows.h>
+
+
+/* This is actually required to break a circular dependency - this code is used
+ * by the exception handler, so it can't depend on the exception handler.
+ */
+#pragma GCC optimize "no-exceptions"
+
+
+__SHMEM_NAME(region_struct) __SHMEM_NAME(local_shmem_region) = {0};
+static char full_atom_name[sizeof(SHMEM_VERSION_PREFIX) + (sizeof(void*) * 8) + 1];
+static char mutex_name[sizeof(SHMEM_VERSION_PREFIX) + (sizeof(DWORD) * 2)];
+
+
+static void shmem3_debugbreak(void)
+{
+    __asm__ __volatile__("int {$}3":);
+}
+
+/* bughunter, creates a breakpoint at the failed function and prints error */
+static void __shmem_get_error(const char *msg)
+{
+    DWORD err_code;
+    if (__builtin_expect((err_code = GetLastError()) != NO_ERROR, 0))
+    {
+        /* maybe print error to screen ? */
+        LPSTR err;
+        if (FormatMessageA(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,
+         NULL, err_code, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
+         (LPSTR)&err, 0, NULL))
+        {
+            OutputDebugStringA(err); /* or otherwise log it */
+            OutputDebugStringA(msg);
+            LocalFree(err);
+        }
+        /* drop a breakpoint if the debugger is present */
+        if (IsDebuggerPresent())
+            shmem3_debugbreak();
+    }
+}
+
+
+static void* __shmem_get_ptr_from_atom(ATOM atom, char* name_buf, size_t name_buf_len, size_t ptr_offset)
+{
+    size_t ptr_len = sizeof(void*) * 8;
+    if ((name_buf_len - ptr_offset - 1) < ptr_len)
+    {
+        __shmem_get_error("string mismatch in atom\n");
+        return 0;
+    }
+    if (!GetAtomNameA(atom, name_buf, (int)name_buf_len))
+    {
+        __shmem_get_error("failed to get string from atom\n");
+        return 0;
+    }
+    size_t ptr = 0;
+    size_t i = 0;
+    for (; i < ptr_len; ++i)
+    {
+        if (name_buf[ptr_offset + i] == 'A')
+            ptr |= ((size_t)1u << (ptr_len - i));
+    }
+    return (void*)ptr;
+}
+
+
+int __SHMEM_NAME(cleanup_local_region)(void);
+int __SHMEM_NAME(cleanup_local_region)(void)
+{
+    /* This mutex is needed to prevent another __shmem region being added or removed while we are
+     * traversing the list.
+     */
+    HANDLE hmutex = CreateMutexA(0, FALSE, mutex_name);
+    if (WaitForSingleObject(hmutex, INFINITE) != WAIT_OBJECT_0)
+    {
+        __shmem_get_error("failed to to lock cleanup mutex\n");
+        CloseHandle(hmutex);
+        return 0;
+    }
+
+    /* If there is at least one other region still in the list, remove ourselves from it */
+    __SHMEM_NAME(region_struct)* runner = __SHMEM_NAME(local_shmem_region).head;
+    if (runner->next)
+    {
+        if (runner == &(__SHMEM_NAME(local_shmem_region)))
+        {
+            /* We were the head of the list */
+            runner->head = runner->next;
+        }
+        while (runner)
+        {
+            if (runner->next == &(__SHMEM_NAME(local_shmem_region)))
+                runner->next = runner->next->next;
+            else if (runner->next)
+                runner->next->head = runner->head;
+            runner = runner->next;
+        }
+    }
+    /* Otherwise, remove the atom from the table so that the next instance to load will start a new list */
+    else
+    {
+        ATOM atom = FindAtomA(full_atom_name);
+        if (atom)
+            DeleteAtom(atom);
+    }
+
+    ReleaseMutex(hmutex);
+    CloseHandle(hmutex);
+
+    return 0;
+}
+
+/* Don't depend on libgcc */
+static void *memset0(void *dest, int c, size_t count)
+{
+    char *bytes = (char *)dest;
+    while (count--)
+        *bytes++ = (char)c;
+    return dest;
+}
+static void *memcpy0(void *dest, const void *src, size_t count)
+{
+    char *dest8 = (char *)dest;
+    const char *src8 = (const char *)src;
+    while (count--)
+        *dest8++ = *src8++;
+    return dest;
+}
+
+__SHMEM_NAME(region_struct)* __SHMEM_NAME(init_local_region)(void)
+{
+    /* Initialize the mutex name as a printable representation of GetCurrentProcessId() + SHMEM_VERSION_PREFIX */
+    const DWORD pid = GetCurrentProcessId();
+    size_t i = 0;
+    for (; i < sizeof(DWORD); ++i)
+    {
+        mutex_name[i * 2] = (*((const unsigned char*)&pid + i) >> 4) + 0x41;
+        mutex_name[i * 2 + 1] = (*((const unsigned char*)&pid + i) & 0xF) + 0x61;
+    }
+    memcpy0(mutex_name + (sizeof(DWORD) * 2), SHMEM_VERSION_PREFIX, sizeof(SHMEM_VERSION_PREFIX));
+
+    /* Initialize the atom name as SHMEM_VERSION_PREFIX + '-' + a bunch of 'a' */
+    const size_t name_len = sizeof(SHMEM_VERSION_PREFIX) - 1;
+    const size_t ptr_len = sizeof(void*) * 8;
+    memcpy0(full_atom_name, SHMEM_VERSION_PREFIX, name_len);
+    full_atom_name[name_len] = '-';
+    memset0(full_atom_name + name_len + 1, 'a', ptr_len);
+    full_atom_name[name_len + 1 + ptr_len] = 0;
+
+    /* This mutex is needed to prevent another __shmem region being added or removed in the time between
+     * the FindAtomA call and when we finish traversing the linked list and adding ourselves to the end of
+     * it.
+     */
+    HANDLE hmutex = CreateMutexA(0, FALSE, mutex_name);
+    if (WaitForSingleObject(hmutex, INFINITE) != WAIT_OBJECT_0)
+    {
+        __shmem_get_error("failed to to lock creation mutex\n");
+        CloseHandle(hmutex);
+        return 0;
+    }
+
+    __SHMEM_NAME(region_struct)* local_addr = &(__SHMEM_NAME(local_shmem_region));
+
+    /* See if a named atom was already created */
+    ATOM atom = FindAtomA(full_atom_name);
+    if (!atom)
+    {
+        /* The uppercase/lowercase A's following the prefix represent bits - A for 1 and a for 0. */
+        size_t i = 0;
+        for (; i < ptr_len; ++i)
+        {
+            if ((((size_t)local_addr) >> (ptr_len - i)) & 1)
+                full_atom_name[name_len + 1 + i] = 'A';
+        }
+        atom = AddAtomA(full_atom_name);
+        if (!atom)
+        {
+            __shmem_get_error("failed to add string to atom table\n");
+            return 0;
+        }
+        __SHMEM_NAME(local_shmem_region).head = local_addr;
+        _onexit(__SHMEM_NAME(cleanup_local_region));
+    }
+    else
+    {
+        __SHMEM_NAME(region_struct)* runner = (__SHMEM_NAME(region_struct)*)__shmem_get_ptr_from_atom(atom,
+         full_atom_name, name_len + 1 + ptr_len + 1, name_len + 1);
+        __SHMEM_NAME(local_shmem_region).head = runner;
+        /* Check if we're already part of the linked list; add ourselves if not */
+        while (runner->next && runner != local_addr)
+            runner = runner->next;
+        if (runner != local_addr)
+        {
+            runner->next = local_addr;
+            _onexit(__SHMEM_NAME(cleanup_local_region));
+        }
+    }
+
+    ReleaseMutex(hmutex);
+    CloseHandle(hmutex);
+
+    return __SHMEM_NAME(local_shmem_region).head;
+}
+
+#endif /* USE_SHMEM3 */
diff --git a/mingw-w64-libraries/winpthreads/src/thread.c b/mingw-w64-libraries/winpthreads/src/thread.c
index 91a793f8f..3001e1766 100644
--- a/mingw-w64-libraries/winpthreads/src/thread.c
+++ b/mingw-w64-libraries/winpthreads/src/thread.c
@@ -30,29 +30,47 @@
 #include "thread.h"
 #include "misc.h"
 #include "winpthread_internal.h"
+#include "shmem3.h"
 
 static _pthread_v *__pthread_self_lite (void);
 
-void (**_pthread_key_dest)(void *) = NULL;
+typedef void (**pthread_key_dest_func_ptr)(void *);
+__SHMEM_DEFINE(pthread_key_dest_func_ptr, _pthread_key_dest_shmem)
+#define _pthread_key_dest __SHMEM_GET(pthread_key_dest_func_ptr, _pthread_key_dest_shmem)
 
-static volatile long _pthread_cancelling;
-static int _pthread_concur;
+__SHMEM_DEFINE(long, _pthread_cancelling_shmem)
+#define _pthread_cancelling __SHMEM_GET(long, _pthread_cancelling_shmem)
+__SHMEM_DEFINE(int, _pthread_concur_shmem)
+#define _pthread_concur __SHMEM_GET(int, _pthread_concur_shmem)
 
 /* FIXME Will default to zero as needed */
-static pthread_once_t _pthread_tls_once;
-static DWORD _pthread_tls = 0xffffffff;
-
-static pthread_rwlock_t _pthread_key_lock = PTHREAD_RWLOCK_INITIALIZER;
-static unsigned long _pthread_key_max=0L;
-static unsigned long _pthread_key_sch=0L;
-
-static _pthread_v *pthr_root = NULL, *pthr_last = NULL;
-static pthread_mutex_t mtx_pthr_locked = PTHREAD_RECURSIVE_MUTEX_INITIALIZER;
-
-static __pthread_idlist *idList = NULL;
-static size_t idListCnt = 0;
-static size_t idListMax = 0;
-static pthread_t idListNextId = 0;
+__SHMEM_DEFINE(pthread_once_t, _pthread_tls_once_shmem)
+#define _pthread_tls_once __SHMEM_GET(pthread_once_t, _pthread_tls_once_shmem)
+__SHMEM_DEFINE_INIT(DWORD, _pthread_tls_shmem, 0xffffffff)
+#define _pthread_tls __SHMEM_GET(DWORD, _pthread_tls_shmem)
+
+__SHMEM_DEFINE_INIT(pthread_rwlock_t, _pthread_key_lock_shmem, PTHREAD_RWLOCK_INITIALIZER)
+#define _pthread_key_lock __SHMEM_GET(pthread_rwlock_t, _pthread_key_lock_shmem)
+__SHMEM_DEFINE(unsigned long, _pthread_key_max_shmem)
+#define _pthread_key_max __SHMEM_GET(unsigned long, _pthread_key_max_shmem)
+__SHMEM_DEFINE(unsigned long, _pthread_key_sch_shmem)
+#define _pthread_key_sch __SHMEM_GET(unsigned long, _pthread_key_sch_shmem)
+
+__SHMEM_DEFINE(_pthread_v*, pthr_root_shmem)
+#define pthr_root __SHMEM_GET(_pthread_v*, pthr_root_shmem)
+__SHMEM_DEFINE(_pthread_v*, pthr_last_shmem)
+#define pthr_last __SHMEM_GET(_pthread_v*, pthr_last_shmem)
+__SHMEM_DEFINE_INIT(pthread_mutex_t, mtx_pthr_locked_shmem, PTHREAD_RECURSIVE_MUTEX_INITIALIZER)
+#define mtx_pthr_locked __SHMEM_GET(pthread_mutex_t, mtx_pthr_locked_shmem)
+
+__SHMEM_DEFINE(__pthread_idlist*, idList_shmem)
+#define idList __SHMEM_GET(__pthread_idlist*, idList_shmem)
+__SHMEM_DEFINE(size_t, idListCnt_shmem)
+#define idListCnt __SHMEM_GET(size_t, idListCnt_shmem)
+__SHMEM_DEFINE(size_t, idListMax_shmem)
+#define idListMax __SHMEM_GET(size_t, idListMax_shmem)
+__SHMEM_DEFINE(pthread_t, idListNextId_shmem)
+#define idListNextId __SHMEM_GET(pthread_t, idListNextId_shmem)
 
 #if !defined(_MSC_VER)
 #define USE_VEH_FOR_MSC_SETTHREADNAME
@@ -547,9 +565,15 @@ typedef struct collect_once_t {
   struct collect_once_t *next;
 } collect_once_t;
 
-static collect_once_t *once_obj = NULL;
+__SHMEM_DEFINE(collect_once_t*, once_obj_shmem)
+#define once_obj __SHMEM_GET(collect_once_t*, once_obj_shmem)
 
+#if !(USE_SHMEM3)
 static pthread_spinlock_t once_global = PTHREAD_SPINLOCK_INITIALIZER;
+#else
+__SHMEM_DEFINE_INIT(pthread_spinlock_t, once_global_shmem, PTHREAD_SPINLOCK_INITIALIZER)
+#define once_global __SHMEM_GET(pthread_spinlock_t, once_global_shmem)
+#endif
 
 static collect_once_t *
 enterOnceObject (pthread_once_t *o)
@@ -1790,7 +1814,8 @@ pthread_detach (pthread_t t)
   return r;
 }
 
-static int dummy_concurrency_level = 0;
+__SHMEM_DEFINE(int, dummy_concurrency_level_shmem)
+#define dummy_concurrency_level __SHMEM_GET(int, dummy_concurrency_level_shmem)
 
 int
 pthread_getconcurrency (void)
